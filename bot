#!/usr/bin/env python
# pylint: disable=C0116,W0613
# This program is dedicated to the public domain under the CC0 license.

"""
First, a few callback functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Example of a bot-user conversation using ConversationHandler.
Send /start to initiate the conversation.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""




import logging
import os
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update,Bot
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)
from pymongo import MongoClient



PORT=int(os.environ.get('PORT', 8443))

API_KEY="2030778912:AAHXRHyc1ilT9psaMbDnyPjygydjqxozKKw"
bt = Bot(API_KEY)

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

PHONE,NAME,REASON,WORK_OBJ= range(4)



##find index in dict function

def find_index(update):
    i = 0
    for t in user_data:
        if t['chat_id'] == update.message.chat_id:
            break
        else:
            i += 1
    return i

##class

class sql_object:
    def __init__(self,obj):
        self.id=obj['id']
        self.date=obj['date']
        self.reason=obj['reason']
        self.name=obj['name']
        self.phone=obj['phone']
        self.work_obj=obj['work_obj']

    def insert_into_db(self):
        obj={
            'user_id' : self.id,
            'date' : self.date,
            'reason' : self.reason,
            'name' : self.name,
            'phone' : self.phone,
            'work_obj' : self.work_obj
        }
        db.user_data_db.insert_one(obj)

user_data=[]
client = MongoClient(r'mongodb+srv://help_me_prog_admin:tonton12@cluster0.y10nh.mongodb.net/test?ssl=true&ssl_cert_reqs=CERT_NONE')
db = client.help_me_prog_db

##functions of actions

def start(update: Update, context: CallbackContext) -> int:
    """Starts the conversation and asks the user about their gender."""

    htext = '''
    שלום חברים! זקוקים לעזרה כלשהי בתכנות? הגעתם למקום הנכון!

    אנחנו HelpMeProgram,קבוצת מתכנתים מנוסים במגוון רחב של תחומים בשפות:
                                C
                                C ++  
                                C#
                                Python
                                Java
    ועוד..
     וכאן לעזור לכל מי שזקוק.

    התחייבות שלנו אליכם-

    *מחיר זול ומותאם אישית לכל עבודה.

    *איש קשר לניתן לפנות אליו,ממש איש עם שם וטלפון ולא באנונימיות בטלגרם.

    נא בחרו את האופציה המתאימה לכם'''

    reply_keyboard = [['רוצה ללמוד תכנות/עזרה בתכנות', 'רוצה לעבוד בתור מתכנת']]



    update.message.reply_text(
        htext,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder='עבודה או לימודים?'
        ),
    )

    return REASON


def reason(update: Update, context: CallbackContext) -> int:
    """post reason for making the chat and choosing name"""

    ##getting user data into sql object
    user_data.append({'chat_id':update.message.chat_id})

    i=find_index(update)


    user_data[i]['id']=update.message.from_user.id
    user_data[i]['date'] = update.message.date
    user_data[i]['reason'] = update.message.text


    user = update.message.from_user
    logger.info("Reason of %s: %s", user.first_name, update.message.text)


    update.message.reply_text('איך קוראים לך?',reply_markup=ReplyKeyboardRemove())

    return NAME


def name(update: Update, context: CallbackContext) -> int:
    """Stores the selected name and asks for a phone number."""

    ##getting user data into sql object

    i=find_index(update)



    user_data[i]['name'] = update.message.text


    user = update.message.from_user
    logger.info("Name of %s: %s", user.first_name, update.message.text)

    htext="נעים להכיר אותך "
    htext+=update.message.text
    htext+="\n\nהכנס מספר טלפון בבקשה כדי שנוכל לחזור אלייך בהקדם."
    update.message.reply_text(
      htext
    )

    return PHONE


def phone(update: Update, context: CallbackContext) -> int:
    """Stores the phone of the user and asks for work document."""

    ##getting user data into sql object

    i=find_index(update)



    user_data[i]['phone'] = update.message.text



    user = update.message.from_user
    logger.info("Phone of %s: %s", user.first_name, update.message.text)

    update.message.reply_text('תודה לך! ,כעת תשלח את קובץ העבודה/קורות החיים שלך! או לחץ skip/ על מנת לדלג על שלב זה')

    return WORK_OBJ

def work_obj(update: Update, context: CallbackContext) -> int:
    """Stores the document of the user and ends the chat."""



    ## bot geting the document and its file_name

    file_id = update.message['document']['file_id']
    doc=bt.get_file(file_id)
    fileName = update.message['document']['file_name']

    ##find index of user in dict
    i = find_index(update)


    dict_file={'file_id':file_id,'file_name':fileName}
    user_data[i]['work_obj']=dict_file


    update.message.reply_text('תודה לך! נוצר איתך קשר בקרוב!')

    ##inserting data into sql and deleting user session
    sql_obj=sql_object(user_data[i])
    sql_obj.insert_into_db()

    ##send document to tony and eytan's telegram
    bt.send_document(437554162, file_id, fileName)
    bt.send_document(405807248, file_id, fileName)


    user_data.pop(i)

    return ConversationHandler.END

def skip_work_obj(update: Update, context: CallbackContext) -> int:
    """Skips the work_obj and ends chat."""
    user = update.message.from_user
    logger.info("User %s did not send a document.", user.first_name)
    update.message.reply_text('לא נורא שלא שלחת,נוצר איתך קשר בקרוב!')

    i=find_index(update)

    ##inserting data into sql and deleting user session

    user_data[i]['work_obj'] = None
    sql_obj = sql_object(user_data[i])
    sql_obj.insert_into_db()

    user_data.pop(i)

    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancels and ends the conversation."""
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    update.message.reply_text(
        'Bye! I hope we can talk again some day.', reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


def main() -> None:
    """Run the bot."""
    # Create the Updater and pass it your bot's token.



    updater = Updater(API_KEY)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Add conversation handler with the states REASON,NAME,PHONE,WORK_OBJ
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REASON: [MessageHandler(Filters.regex('רוצה'), reason)],
            NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, phone)],
            WORK_OBJ: [MessageHandler(Filters.document, work_obj), CommandHandler('skip', skip_work_obj)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_webhook(listen="0.0.0.0",
                          port=int(PORT),
                          url_path=API_KEY,
                          webhook_url='https://blooming-spire-16781.herokuapp.com/' + API_KEY)
    #updater.bot.setWebhook('https://blooming-spire-16781.herokuapp.com/' + API_KEY)

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
